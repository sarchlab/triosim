// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/syifan/triosim/timemodel (interfaces: TimeEstimator)

package traceplayer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	timemodel "github.com/sarchlab/triosim/timemodel"
)

// MockTimeEstimator is a mock of TimeEstimator interface.
type MockTimeEstimator struct {
	ctrl     *gomock.Controller
	recorder *MockTimeEstimatorMockRecorder
}

// MockTimeEstimatorMockRecorder is the mock recorder for MockTimeEstimator.
type MockTimeEstimatorMockRecorder struct {
	mock *MockTimeEstimator
}

// NewMockTimeEstimator creates a new mock instance.
func NewMockTimeEstimator(ctrl *gomock.Controller) *MockTimeEstimator {
	mock := &MockTimeEstimator{ctrl: ctrl}
	mock.recorder = &MockTimeEstimatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeEstimator) EXPECT() *MockTimeEstimatorMockRecorder {
	return m.recorder
}

// Estimate mocks base method.
func (m *MockTimeEstimator) Estimate(arg0 timemodel.TimeEstimatorInput) (timemodel.TimeEstimatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Estimate", arg0)
	ret0, _ := ret[0].(timemodel.TimeEstimatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Estimate indicates an expected call of Estimate.
func (mr *MockTimeEstimatorMockRecorder) Estimate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Estimate", reflect.TypeOf((*MockTimeEstimator)(nil).Estimate), arg0)
}
